@Library('shared-library') _
pipeline{
    agent any

    parameters {
        choice(name: 'BRANCH_NAME', choices: ['main', 'dev'], description: 'Choose the environment to deploy')
        string(name: 'IMAGE_TAG', defaultValue: 'v1.0', description: 'Docker image tag')
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('mateineaga10-dockerhub')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "Checking out branch ${params.BRANCH_NAME}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH_NAME}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/mateineaga/lab3-epam-jenkins.git',
                            credentialsId: 'GitCredentials'  // Folosim GitCredentials pentru autentificare
                        ]]
                    ])
                }
            }
        }

        stage('Testing from shared library!') {
            steps {
                helloWorld()
            }
        }

        stage('Build'){
            steps{
                nodejs('node'){
                    echo 'Building application.....'
                    sh 'npm install'
                }
            }
        }

        stage('Test'){
            steps{
                nodejs('node'){
                    echo 'Testing the application.....'
                    sh 'npm test'
                }
            }
        }

        stage("hadolint Dockerfile") {
            agent {
                docker {
                    image 'hadolint/hadolint:latest-debian'  // Folosește imaginea corespunzătoare
                }
            }
            steps {
                sh 'hadolint Dockerfile'  // Salvezi output-ul în report.txt
            }
        }

        stage('Build docker image'){

            agent { 
                label "agent1" 
            }

            steps{
                script {
                    sh '''#!/bin/bash
                    echo "Login..."
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    
                    if [[ "${BRANCH_NAME}" == "main" ]]; then
                        cp src/logo.svg main_logo.svg

                        echo "Deleting image from local"
                        docker rmi mateineaga10/nodemain:v1.0 || true

                        echo "Building the image for branch: ${BRANCH_NAME}"
                        echo "Building nodemain:${IMAGE_TAG}"

                        docker build -t "mateineaga10/nodemain:${IMAGE_TAG}" -f Dockerfile .
                    
                        echo "Pushing image..."
                        docker push mateineaga10/nodemain:${IMAGE_TAG}
                    else
                        cp src/logo.svg dev_logo.svg

                        echo "Deleting image from local"
                        docker rmi mateineaga10/nodedev:v1.0 || true

                        echo "Building the image for branch: ${BRANCH_NAME}"
                        echo "Building nodedev:${IMAGE_TAG}"

                        docker build -t "mateineaga10/nodedev:${IMAGE_TAG}" -f Dockerfile .
                    
                        echo "Pushing image..."
                        docker push mateineaga10/nodedev:${IMAGE_TAG}
                    fi
                    '''
                }
            }
        }

        stage("Vulnerability scan: trivy for Dockerfile") {

            agent { 
                label "agent1" 
            }

            steps {
                sh 'trivy --no-progress --exit-code 0 --severity HIGH,MEDIUM,LOW mateineaga10/nodemain:v1.0'
            }
        }

        stage('Deploy docker image'){
            steps{
                script {
                    sh '''#!/bin/bash
                    echo "Login..."
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    
                    if [[ "${BRANCH_NAME}" == "main" ]]; then

                        echo "Cleaning the running&stopped containers!"
                        docker stop nodemain || true
                        docker rm nodemain || true

                        echo "Pulling image..."
                        docker pull mateineaga10/nodemain:${IMAGE_TAG}

                        echo "Running image nodemain:${IMAGE_TAG}"
                        echo "Port: 3000"

                        docker run -d --expose 3000 -p 3000:3000 --name nodemain nodemain:${IMAGE_TAG}
                    
                    else

                        echo "Cleaning the running&stopped containers!"
                        docker stop nodedev || true
                        docker rm nodedev || true

                        echo "Pulling image..."
                        docker pull mateineaga10/nodedev:${IMAGE_TAG}

                        echo "Running image nodedev:${IMAGE_TAG}"
                        echo "Port: 3001"

                        docker run -d --expose 3001 -p 3001:3000 --name nodedev nodedev:${IMAGE_TAG}
                    fi
                    '''
                }
            }
        }

    }
}